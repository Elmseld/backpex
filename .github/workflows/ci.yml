name: CI

on:
  push:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_TESTING: ${{ github.repository }}/testing
  IMAGE_NAME_RUNTIME: ${{ github.repository }}/runtime

jobs:
  test:
    name: "Test backpex"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        elixir: ['1.15.7']
        erlang: ['26.1.2']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.erlang }}
          elixir-version: ${{ matrix.elixir }}

      - name: Restore deps and _build cache
        uses: actions/cache@v1
        with:
          path: |
            deps
            _build
            .mix
          key: deps-${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
          restore-keys: |
            deps-${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force --if-missing
          mix local.rebar --force --if-missing
          mix deps.get
      
      - name: Run tests
        run: |
          mix test
      
      - name: Check formatting
        run: |
          mix format --check-formatted
      
      - name: Compile with warnings as errors
        run: |
          mix compile --warnings-as-errors --force

      - name: Dialyzer
        run: |
          mix dialyzer --force-check

      - name: Credo
        run: |
          mix credo

      - name: Sobelow
        run: |
          mix sobelow --config

      - name: Deps Unused
        run: |
          mix deps.unlock --check-unused

      - name: Deps Audit 
        continue-on-error: true
        run: |
          mix deps.audit
      
      - name: Gettext Check
        run: |
          mix gettext.extract --check-up-to-date

  build-demo-testing:
    name: "Build and push demo testing image"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_TESTING }}

      - name: Build container
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: builder
          build-args: |
            MIX_ENV=test
    outputs:
      image: ${{ steps.meta.outputs.tags }}

  lint-demo:
    needs: build-demo-testing
    name: "Lint demo"
    runs-on: ubuntu-latest
    container:
      # we need to get the image by the output of the previous job because
      # we can not acces envs here 
      image: ${{ needs.build-demo-testing.outputs.image }}
  
    steps:
      - name: lint:mix
        working-directory: /opt/app/demo
        run: |
          yarn lint:mix
          
      - name: lint:dialyzer
        working-directory: /opt/app/demo  
        run: |
          yarn lint:dialyzer

      - name: lint:credo
        working-directory: /opt/app/demo
        run: |
          yarn lint:credo

      - name: lint:sobelow
        working-directory: /opt/app/demo
        run: |
          yarn lint:sobelow

      - name: lint:style
        working-directory: /opt/app/demo
        run: |
          yarn lint:style
          
      - name: lint:standard
        working-directory: /opt/app/demo
        run: |
          yarn lint:standard

      - name: lint:deps-unused
        working-directory: /opt/app/demo
        run: |
          yarn lint:deps-unused
          
      - name: lint:gettext
        working-directory: /opt/app/demo
        run: |
          yarn lint:gettext

  test-demo:
    needs: build-demo-testing
    name: "Test demo"
    runs-on: ubuntu-latest
    container:
      # we need to get the image by the output of the previous job because
      # we can not acces envs here 
      image: ${{ needs.build-demo-testing.outputs.image }}
    
    steps:
      - name: Compile with warnings as errors
        working-directory: /opt/app/demo
        run: |
          mix compile --warnings-as-errors --force

      - name: Run test
        working-directory: /opt/app/demo
        run: |
          yarn test

      - name: Deps audit
        working-directory: /opt/app/demo
        continue-on-error: true
        run: |
          mix deps.audit

  build-demo-runtime:
    name: "Build and push demo runtime image"
    runs-on: ubuntu-latest
    needs: [test-demo, lint-demo]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_RUNTIME }}

      - name: Build container
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: runtime
          build-args: |
            MIX_ENV=prod